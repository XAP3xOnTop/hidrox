"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AchievementCreator = exports.ICONS = void 0;
var canvas_1 = require("canvas");
var canvas_constructor_1 = require("canvas-constructor");
var icons_1 = require("./icons");
Object.defineProperty(exports, "ICONS", { enumerable: true, get: function () { return icons_1.ICONS; } });
canvas_1.registerFont(__dirname + "/../../src/assets/font.ttf", {
    family: "Minecraft",
});
var AchievementCreator = /** @class */ (function () {
    function AchievementCreator() {
    }
    AchievementCreator.createCanvas = function () {
        return __awaiter(this, void 0, void 0, function () {
            var background, canvas;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, canvas_constructor_1.resolveImage(__dirname + "/../../src/assets/bg.png")];
                    case 1:
                        background = _a.sent();
                        canvas = new canvas_constructor_1.Canvas(503, 100).printImage(background, 0, 0);
                        return [2 /*return*/, canvas];
                }
            });
        });
    };
    AchievementCreator.fetchImage = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var image;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, canvas_constructor_1.resolveImage(__dirname + "/../../src/assets/icons/" + name + ".png")];
                    case 1:
                        image = _a.sent();
                        return [2 /*return*/, image];
                }
            });
        });
    };
    AchievementCreator.create = function (icon, title, content) {
        return __awaiter(this, void 0, void 0, function () {
            var image, buffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!Object.values(icons_1.ICONS).includes(icon))
                            throw new Error(icon + " not found in icons folder. See \"ICONS\" export for more information.");
                        if (title.length > 28)
                            throw new Error("Title can not be longer than 28 characters");
                        if (content.length > 28)
                            throw new Error("Content can not be longer than 28 characters");
                        return [4 /*yield*/, this.fetchImage(icon)];
                    case 1:
                        image = _a.sent();
                        return [4 /*yield*/, this.createCanvas()];
                    case 2:
                        buffer = (_a.sent())
                            .setTextFont("24px Minecraft")
                            .setTextAlign("left")
                            .setColor("#f8f628")
                            .printText(title, 125, 40)
                            .setColor("#ffffff")
                            .printText(content, 125, 80)
                            .printImage(image, 35, 20)
                            .toBuffer();
                        return [2 /*return*/, buffer];
                }
            });
        });
    };
    return AchievementCreator;
}());
exports.AchievementCreator = AchievementCreator;
